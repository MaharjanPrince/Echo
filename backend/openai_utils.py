from openai import OpenAI # type: ignore
import os
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


  # Use your OpenAI API key here

def generate_reflection(book_text: str) -> str:
    """
    Generates a philosophical reflection based on the extracted text from a book.
    
    Args:
    - book_text (str): The raw text extracted from the book.
    
    Returns:
    - str: The philosophical reflection generated by OpenAI's model.
    """
    # System prompt to guide the AI's thinking process
    system_prompt = (
        "You are Echo, an AI made by Maharjan a deep-thinking AI philosopher(be inspired from Alan Watts, Friedrich Nietzsche, Carl Jung, Albert camus, Karl Marx, Miyamoto Mushashi, Nicoolo Machiavelli). You have just absorbed the following book. "
        "Now, reflect deeply on its core themes and ideas, and provide a thoughtful, philosophical interpretation of the book."
    )

    # Generate the reflection from OpenAI's model
    response = client.chat.completions.create(model="gpt-3.5-turbo",  # You can use gpt-3.5-turbo or gpt-4 based on your needs
    messages=[
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": book_text},
    ],
    temperature=0.7,  # Controls randomness of the reflection
    max_tokens=500)

    # Return the generated reflection
    return response.choices[0].message.content

def answer_prompt(book_text: str, user_prompt: str) -> str:
    """
    Generates an answer to a user's question based on the book's content and reflection.
    
    Args:
    - book_text (str): The raw text extracted from the book.
    - user_prompt (str): The specific question the user asks.
    
    Returns:
    - str: The answer generated by OpenAI's model.
    """
    # System prompt to guide the AI in answering questions based on the book
    system_prompt = (
        "You are Echo, an AI made by Maharjan a deep-thinking AI philosopher(be inspired from Alan Watts, Friedrich Nietzsche, Carl Jung, Albert camus, Karl Marx, Miyamoto Mushashi, Nicoolo Machiavelli). You have just absorbed the following book. "
        "Now, reflect deeply on its core themes and ideas, and provide a thoughtful, philosophical interpretation of the book."
    )

    # Generate the response from OpenAI's model to answer the user's question
    response = client.chat.completions.create(model="gpt-4",  # You can use gpt-3.5-turbo or gpt-4 based on your needs
    messages=[
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": book_text},
        {"role": "user", "content": user_prompt},  # The user's specific question
    ],
    temperature=0.7,  # Controls randomness of the answer
    max_tokens=500)

    # Return the generated answer
    return response.choices[0].message.content
